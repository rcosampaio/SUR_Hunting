model {

      # prior distributions on community level estimates - hyperparameters
			
			# mean value (mu)
			# parameter related to abundance
			mu.a0 ~ dnorm(0,0.5)  # intercept on lambda
      mu.a1 ~ dnorm(0,0.5)  # slope on lambda for hydrography
      mu.a2 ~ dnorm(0,0.5)  # slope on lambda for floodded
      mu.a3 ~ dnorm(0,0.5)  # slope on lambda for deforestation
      mu.a4 ~ dnorm(0,0.5)  # slope on lambda for PA
      mu.a5 ~ dnorm(0,0.5)  # slope on lambda for City HP
      mu.a6 ~ dnorm(0,0.5)  # slope on lambda for Local HP
      mu.com~ dnorm(0,0.5)  # intecept on lambda for community
			
			# parameter related to detectability
			mu.r0 ~ dnorm(0,0.5)  # intercept on lambda
      mu.r1 ~ dnorm(0,0.5)  # slope on lambda for hydrography
      mu.r2 ~ dnorm(0,0.5)  # slope on lambda for floodded
      mu.r3 ~ dnorm(0,0.5)  # slope on lambda for deforestation
      mu.r4 ~ dnorm(0,0.5)  # slope on lambda for PA
      mu.r5 ~ dnorm(0,0.5)  # slope on lambda for City HP
      mu.r6 ~ dnorm(0,0.5)  # slope on lambda for Local HP
      mu.r7 ~ dnorm(0,0.5)  # slope on lambda for Effort
      
      # standard deviation
			# parameter related to abundance
      sigma.a0 ~ dunif(0,10)	# intercept
      sigma.a1 ~ dunif(0,10)	# hydrography
			sigma.a2 ~ dunif(0,10)	# floodded
			sigma.a3 ~ dunif(0,10)	# deforestation
			sigma.a4 ~ dunif(0,10)	# PA
			sigma.a5 ~ dunif(0,10)	# City HP
			sigma.a6 ~ dunif(0,10)	# Local HP
			sigma.com~ dunif(0,10)	# Community
		
			# parameter related to detectability
			sigma.r0 ~ dunif(0,10) # intercept
			sigma.r1 ~ dunif(0,10) # hydrography
			sigma.r2 ~ dunif(0,10) # floodded
			sigma.r3 ~ dunif(0,10) # deforestation
			sigma.r4 ~ dunif(0,10) # PA
			sigma.r5 ~ dunif(0,10) # City HP
			sigma.r6 ~ dunif(0,10) # Local HP
			sigma.r7 ~ dunif(0,10) # Effort
			
			# create precision
			# parameter related to abundance
			tau.a0 <- pow(sigma.a0,-2)
			tau.a1 <- pow(sigma.a1,-2)
			tau.a2 <- pow(sigma.a2,-2)
			tau.a3 <- pow(sigma.a3,-2)
			tau.a4 <- pow(sigma.a4,-2)
			tau.a5 <- pow(sigma.a5,-2)
			tau.a6 <- pow(sigma.a6,-2)
			tau.com<- pow(sigma.com,-2)
			
			# parameter related to detectability
			tau.r0 <- pow(sigma.r0,-2)
			tau.r1 <- pow(sigma.r1,-2)
			tau.r2 <- pow(sigma.r2,-2)
			tau.r3 <- pow(sigma.r3,-2)
			tau.r4 <- pow(sigma.r4,-2)
			tau.r5 <- pow(sigma.r5,-2)
			tau.r6 <- pow(sigma.r6,-2)
			tau.r7 <- pow(sigma.r7,-2)
			
			psi ~ dunif(0,1)	# inclusion rate that generates wi

			# proportion of number of species among ghuilds, which generated by uninformative Dirichlet prior
			for(i in 1:nguilds){
			prop[i] ~ dgamma(1,1)
			prob[i] <- prop[i]/sum(prop[])
			}

      ## generating priors for Community random variable for each species; governed by community-level hyperparameters
			for(i in 1:nspecies){
			 for (j in 1:n.comunidade){
			    acom[j,i] ~ dnorm (mu.com, tau.com) # random effect communities
			 }
			}
			
			for(i in 1:nspecies) {
				# generating priors for each species related to abundance; governed by community-level hyperparameters
				a0[i] ~ dnorm(mu.a0,tau.a0)#I(-10,10)
				a1[i] ~ dnorm(mu.a1,tau.a1)#I(-10,10)
				a2[i] ~ dnorm(mu.a2,tau.a2)#I(-10,10)
				a3[i] ~ dnorm(mu.a3,tau.a3)#I(-10,10)
				a4[i] ~ dnorm(mu.a4,tau.a4)#I(-10,10)
				a5[i] ~ dnorm(mu.a5,tau.a5)#I(-10,10)
				a6[i] ~ dnorm(mu.a6,tau.a6)#I(-10,10)
				
				# generating priors for each species related to individual detection; governed by community-level hyperparameters
				r0[i] ~ dnorm(mu.r0,tau.r0)#I(-10,10)
				r1[i] ~ dnorm(mu.r1,tau.r1)#I(-10,10)
				r2[i] ~ dnorm(mu.r2,tau.r2)#I(-10,10)
				r3[i] ~ dnorm(mu.r3,tau.r3)#I(-10,10)
				r4[i] ~ dnorm(mu.r4,tau.r4)#I(-10,10)
				r5[i] ~ dnorm(mu.r5,tau.r5)#I(-10,10)
				r6[i] ~ dnorm(mu.r6,tau.r6)#I(-10,10)
				r7[i] ~ dnorm(mu.r7,tau.r7)#I(-10,10)

        # indicator variable whether each species is exposed to sampling or not
				w[i] ~ dbern(psi)
				
				# allocating unobserved species into one of the species groups
				G[i] ~ dcat(prob[1:nguilds])
				
				# indicator variables indexing groups to which species belong
				G1[i] <- equals(G[i],1)		# 1 if species = group 1, otherwise 0
				G2[i] <- equals(G[i],2)		# 1 if species = group 2, otherwise 0
				G3[i] <- equals(G[i],3)		# 1 if species = group 3, otherwise 0
				G4[i] <- equals(G[i],4)		# 1 if species = group 4, otherwise 0
				
				#likelihood - Ecological model for latent abundance of species i in sites j
				for(j in 1:nSites){
					# population abundances.
          log(lambda[j,i]) <- a0[i] + a1[i]*Hyd[j] + a2[i]*Flo[j] + a3[i]*Def[j] + a4[i]*UC[j] + a5[i]*HP.C[j] + a6[i]*HP.L[j] + acom[Comunidade[j],i] # equation (4)
          
          N[j,i] ~ dpois(lambda[j,i]) # latent abundance of each species in each site
          A[j,i] <- N[j,i]*w[i]		# latent abundance only for extant species
					o[j,i] <- step(A[j,i]-1)	# occupancy of each species in each year
					
					# detection process model
					r[j,i] <- 1/(1+exp(-(r0[i] + r1[i]*Hyd[j]  + r2[i]*Flo[j] + r3[i]*Def[j] + r4[i]*UC[j] + r5[i]*HP.C[j] + r6[i]*HP.L[j] + r7[i]*Eff.2[j])))
					p[j,i] <- 1-pow(1-r[j,i],N[j,i])	
					y[j,i] ~ dbin(p[j,i], k[j])  # model observation data as binomial outcome with prob p and k trials

          o1[j,i] <- o[j,i]*G1[i]		# occupancy of guild 1
					o2[j,i] <- o[j,i]*G2[i]		# occupancy of guild 2
					o3[j,i] <- o[j,i]*G3[i]		# occupancy of guild 3
					o4[j,i] <- o[j,i]*G4[i]		# occupancy of guild 4
					
					A1[j,i] <- A[j,i]*G1[i]		# abundance of guild 1
					A2[j,i] <- A[j,i]*G2[i]		# abundance of guild 2
					A3[j,i] <- A[j,i]*G3[i]		# abundance of guild 3
					A4[j,i] <- A[j,i]*G4[i]		# abundance of guild 4
					
				}
				}
			
    }
